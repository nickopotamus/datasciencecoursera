print(paste("Error in best(", state, ", ", outcome,") : invalid outcome", sep=""))
}
bestHospital
}
best("TX", "heart failure")
best("TX", "heart attack")
possible.outcomes <- list("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcome.col <- possible.outcomes[[outcome]]
outcome.col <- possible.outcomes[[pneumonia]]
outcome.col <- possible.outcomes[["pneumonia""]]
""
outcome.col <- possible.outcomes[["pneumonia"]]
outcome.col
hospital.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(hospital.df)
hospital.df[, outcome.col] <- suppressWarnings(sapply(hospital.df[, outcome.col], as.numeric))
head(hospital.df)
hospital.state.df <- subset(hospital.df, State == "TX", c(outcome.col,2))
head(hospital.state.df)
rank.list <- order(hospital.state.df[,1],hospital.state.df[,2], na.last = NA)
head(rank.list)
hospital.state.df[rank.list[num],2]
if (num == "best")
num <- 1
else if (num == "worst")
num <- length(rank.list)
else if (!is.numeric(num))
stop("Unrecognised num argument")
hospital.state.df[rank.list[1],2]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#Make list of possible values of outcome and their index
possible.outcomes <- list("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcome.col <- possible.outcomes[[outcome]]
#Stop if outcome was not in possible.outcomes
if (is.null(outcome.col))
stop("invalid outcome")
#Read the csv
hospital.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Convert the desired column to numeric
hospital.df[, outcome.col] <- suppressWarnings(sapply(hospital.df[, outcome.col], as.numeric))
#Stop if state was not a possible value of states
if (!state %in% unique(hospital.df[,7]))
stop("invalid state")
#Make data.frame for state
hospital.state.df <- subset(hospital.df, State == state, c(outcome.col,2))
#Make list of positions
rank.list <- order(hospital.state.df[,1],hospital.state.df[,2], na.last = NA)
#Check validity of num argument and assign numeric value
if (num == "best")
num <- 1
else if (num == "worst")
num <- length(rank.list)
else if (!is.numeric(num))
stop("Unrecognised num argument")
hospital.state.df[rank.list[num],2]
}
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", "best")
rankhospital("MD", "heart attack", "worst")
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#Make list of possible values of outcome and their index
possible.outcomes <- list("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcome.col <- possible.outcomes[[outcome]]
#Stop if outcome was not in possible.outcomes
if (is.null(outcome.col))
stop("invalid outcome")
#Read the csv
hospital.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Convert the desired column to numeric
hospital.df[, outcome.col] <- suppressWarnings(sapply(hospital.df[, outcome.col], as.numeric))
#Make data.frame for all states
hospital.states.df <- subset(hospital.df, select = c(outcome.col, 2, 7))
hospital.split.df <- split(hospital.states.df, hospital.states.df[3])
staterank <- function(hospital.state.df) {
#Make list of positions
rank.list <- order(hospital.state.df[,1],hospital.state.df[,2], na.last = NA)
#Check validity of num argument and assign numeric value
if (num == "best")
num <- 1
else if (num == "worst")
num <- length(rank.list)
else if (!is.numeric(num))
stop("Unrecognised num argument")
hospital.state.df[rank.list[num],2]
}
ranked.states <- data.frame(sapply(hospital.split.df, staterank))
ranked.states <- data.frame(ranked.states, row.names(ranked.states))
names(ranked.states) <- c("hospital", "state")
ranked.states
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(swirl)
swirl()
librar
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(stydents2, sex_class, count)
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students3
submit()
library(readr)
parse_number("class5")
parse_number("class5")
submit()
?mutate
submit()
students4
submit()
submit()
?unique
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
ACS <- read.csv('ACS.csv')
head(ACS)
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
head(which(agricultureLogical))
head(agricultureLogical)
install.packages('jpeg')
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
, 'jeff.jpg'
, mode='wb' )
?download.file
?curl
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
picture
quantile(picture, probs = c(0.3, 0.8) )
install.packages("data.table)
library("data.table")
install.packages("data.table")
library("data.table")
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
FGDP
FEDSTATS_Country
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
nrow(mergedDT)
mergedDT
mergedDT[order(-Rank)][13,.(Economy)]
mergedDT[order(-Rank)]
mergedDT[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "High income: OECD"]
?lapply
?.SD
?.SDcols
??.SDcols
library('dplyr')
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
breaks
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
breaks
mergedDT[`Income Group` == "Lower middle income", by = c("Income Group", "quantileGDP")]
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
library(devtools)
install_github("cc-hic/ccfun")
R.Version()
R.Version()
R.Version()
install_github("cc-hic/ccfun")
library(ccfun)
library(devtools)
install.packages("devtools")
install_github("cc-hic/ccfun")
library(ccfun)
library(devtools)
install_github("cc-hic/ccfun")
library(ccfun)
install.packages(c("XML", "data.table", "yaml", "pander", "Rcpp", "methods"))
install.packages(c("XML", "data.table", "yaml", "pander", "Rcpp", "methods"))
install.packages(c("XML", "data.table", "yaml", "pander", "Rcpp", "methods"))
install.packages(c("XML", "data.table", "yaml", "pander", "Rcpp", "methods"))
install.packages(c("XML", "data.table", "yaml", "pander", "Rcpp", "methods"))
install.packages("cleanEHR")
devtools::install_github("CC-HIC/cleanEHR")
library(cleanEHR)
data("sample_ccd")
head(ccd)
dt <- ccd_demographic_table(ccd, dtype=TRUE)
dt
library(cleanEHR)
data("sample_ccd")
head(ccd)
dt <- ccd_demographic_table(ccd, dtype=TRUE)
head(ccd)
head(dt)
print(dt[1:3, ])
head(ccd_unique_spell(ccd, duration=1)[, c("episode_id", "spell")])
plot_episode(ccd@episodes[[7]], c("h_rate",  "bilirubin", "fluid_balance_d"))
?plot_episode
plot_episode(ccd@episodes[[7]], c("h_rate",  "bilirubin", "fluid_balance_d"))
head(ccd)
library(swirl)
siwrl
swirl()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment = now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt3
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours=10,minutes=16,seconds=0)
this_moment
?now
now(tzone="America/New_York")
nyc<-now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive = depart + hours(15) + minutes(50)
?with_tz
arrive = with_tz(arrive, tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library("data.table")
communities <- data.table::fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
communities
varNamesSplit <- strsplit(names(communities), "wgtp")
head(varNamesSplit)
?strsplit
varNamesSplit[[123]]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
head(GDPrank)
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
grep("^United",GDPrank[, Country])
?grep
eduDT <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
head(eduDT)
mergedDT <- merge(GDPrank, eduDT, by = 'CountryCode')
head(mergedDT)
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Notes`]), .N]
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
timeDT <- data.table::data.table(timeCol = sampleTimes)
timeDT
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N ]
path <- getwd()
path
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
?fread
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt"), col.names = c("classLabels", "activityName"))
head(activityLabels)
features <- fread(file.path(path, "UCI HAR Dataset/features.txt"), col.names = c("index", "featureNames"))
head(features)
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
head(featuresWanted)
featuresWanted
features
measurements <- features[featuresWanted, featureNames]
measurements
measurements <- gsub('[()]', '', measurements)
measurements
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
train
data.table::setnames(train, colnames(train), measurements)
train
trainSubjects <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt"), col.names = c("SubjectNum"))
trainSubjects
trainActivities <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt"), col.names = c("Activity"))
trainActivities
train <- cbind(trainSubjects, trainActivities, train)
train
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testSubjects <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt"), col.names = c("SubjectNum"))
testActivities <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt"), col.names = c("Activity"))
test <- cbind(testSubjects, testActivities, test)
combined <- rbind(train, test)
combined
combined[["Activity"]] <- factor(combined[, Activity], levels = activityLabels[["classLabels"]], labels = activityLabels[["activityName"]])
combined
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
SubjectNum
combined
?reshape2
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
combined
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color="blue")
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollition, region=="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
plt(pm25~latitude, data=pollution)
plot(pm25~latitude, data=pollution)
with(pollution, plot(latitude~pm25))
with(pollution, plot(latitude,pm25))
abline(h=12)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow =
c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region, data=state, layout=c(4,1))
xyplot(Life.Exp~Income|region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(disp, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
?par
?pch
points(wind, ozone, data=may, color="blue", pch=17)
points(Wind, Ozone, data=may, color="blue", pch=17)
head(may)
points(may$Wind, may$Ozone, color="blue", pch=17)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend(topright, pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(h=median(airquality$Wind), lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer=TRUE)
