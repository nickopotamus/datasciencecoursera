}
above <- function(x,n){
use <- x>n
x[use]
}
above(2,1)
above(1,2)
above(3,12)
above(12,3)
12>3
x[TRUE]
12[TRUE]
12[FALSE]
above10(12)
above10(9)
above <- function(x,n=10){
use <- x>n
x[use]
}
above(2)
above(12)
x=1:20
above(x)
formals(above)
mydata <- rnorm(100)
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm=FALSE)
args(lm)
lm(data=mydata, y~x, model=FALSE< 1:100)
y
f <- function(a,b=1,c=2,d=null){}
f <- functions(a,b){}
f <- functions(a,b){
a^2
}
f <- function(a,b){
a^2
}
f(2)
f <- function(a,b){}
f <- function(a,b){
print(a)
print(b)
}
f(45)
f(45,2)
myplot <- function(x,y,type="l",...){
plot(x,y,type=type,...)
}
myplot()
mean
?mean
args(paste)
args(cat)
search()
f = function(x,y){
x^2+y/z
}
f(2,3)
2^2+3
7/1
7/2
f(1,2)
f(5,10)
5^2+10
5^2+(10/2)
rm(z)
f(5,10)
make.power = function(n){}
make.power = function(n){
pow = function(x){
x^n
}
pow
}
make.power(3)
cune = make.power(3)
cune
cune(3)
square = make.power(2)
square(3)
cube = make.power(3)
ls(environment(cube))
get("n", environment(cube))
y = 10
f = function(x){
y = 2
y^2 + g(x)
}
g = function(x){
x*y
}
f(3)
3*2
2^2+6
3*10+2^2
g = function(x){
a = 3
x+a+y
}
g(2)
y = 3
g(2)
?optim
make.NegLogLik = function(data, fixed=c(FALSE,FALSE)){
params = fixed
function(p){
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1); normals <-rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu=0,sigma=1),nLL)
optim(c(mu=0,sigma=1),nLL)$apr
optim(c(mu=0,sigma=1),nLL)$par
?optimise
nLL <- make.NegLogLik(normals,c(1,FALSE))
x = seq(1.7,1.9,len-100)
x = seq(1.7,1.9,len=100)
y = sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
x = seq(0.5,1.5,len=100)
y = sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
x = as.Date("1970-01-01")
x
unclass(x)
?unclass
unclass(as.Date("1970-01-02"))
unclass(as.Date(x))
x = Sys.time()
x
p = as.POSIXlt(x)
p
names(unclass(p))
names(unclass(x))
p$sec
unclass(x)
datestring = c("January 10, 2012 10:40","December 9, 2011 9:10")
x = strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
?strptime
x = as.Date("2012-01-01")
y = strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x-y
x = as.POSIXlt(x)
x-y
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
8!=8.0
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder*5
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd(c(1.4,3.6,7.9,8.8)))
?sd
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Good", "morning")
submit()
submit()
mad_libs(place="Swindon",adjective="feltch",noun="Frank")
swirl()
libary(swirl)
library(swirl)
rm(list=ls())
swirl()
submit()
?print
submit()
submit()
submit()
submit()
exit
0
libaray(swirl)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},
6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(You mamma so fat)
telegram("Yo mamma so fat)
")"
""
telegram("Yo mamma so fat")
submit()
mad_libs(place="Swindon",adjective="fluff",noun="Trump")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unlcass(d2)
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
ifftime(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?paste0
pollutantmean <- function(directory, polutant, id=1:332){
filenames = list.files(directory) # all file names
for(i in id){
filepath=paste(directory,"/" ,filenames[i], sep="") # filename
data = read.csv(filepath, header = TRUE)            # read file
pollutants = c(pollutants, data[,pollutant])        # extract polutants
}
mean(pollutants, na.rm=TRUE)                          # return mean removing NA values
}
setwd("~/Downloads/specdata")
pollutantmean("~/Downloads/specdata", "sulfate", 1:10)
pollutantmean <- function(directory, polutant, id=1:332){
filenames = list.files(directory)                     # list all file names
pollutants = c()                                      # placeholder for polutants
for(i in id){
filepath=paste(directory,"/" ,filenames[i], sep="") # filename
data = read.csv(filepath, header = TRUE)            # read file
pollutants = c(pollutants, data[,pollutant])        # extract polutants
}
mean(pollutants, na.rm=TRUE)                          # return mean removing NA values
}
pollutantmean("~/Downloads/specdata", "sulfate", 1:10)
pollutantmean <- function(directory, polutant, id=1:332){
filenames = list.files(directory)                     # list all file names
pollutants = c()                                      # placeholder for polutants
for(i in id){
filepath=paste(directory,"/" ,filenames[i], sep="") # filename
data = read.csv(filepath, header = TRUE)            # read file
pollutants = c(pollutants, data[,pollutant])        # extract polutants
}
mean(pollutants, na.rm=TRUE)                          # return mean removing NA values
}
pollutantmean("~/Downloads/specdata", "sulfate", 1:10)
pollutantmean("~/Downloads/specdata", "nitrate", 70:72)
library("data.table")
pollutantmean2 <- function(directory, pollutant, id = 1:332) {
# Format number with fixed width and then append .csv to number
fileNames <- paste0(directory, '/', formatC(id, width=3, flag="0"), ".csv" )
# Reading in all files and making a large data.table
lst <- lapply(fileNames, data.table::fread)
dt <- rbindlist(lst)
if (c(pollutant) %in% names(dt)){
return(dt[, lapply(.SD, mean, na.rm = TRUE), .SDcols = pollutant][[1]])
}
}
pollutantmean2("~/Downloads/specdata", "nitrate", 70:72)
pollutantmean2("~/Downloads/specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id=1:332){
filenames = list.files(directory)                     # list all file names
pollutants = c()                                      # placeholder for polutants
for(i in id){
filepath=paste(directory,"/" ,filenames[i], sep="") # filename
data = read.csv(filepath, header = TRUE)            # read file
pollutants = c(pollutants, data[,pollutant])        # extract polutants
}
mean(pollutants, na.rm=TRUE)                          # return mean removing NA values
}
pollutantmean("~/Downloads/specdata", "nitrate", 70:72)
complete <- function(directory, id= 1:332){
ids = c()   # Empty IDs vector
nobss = c() # Empty number of complete cases vector
filenames = list.files(directory) # Get files
for(i in id){
filepath=paste(directory,"/" ,filenames[i], sep="") # File name
data = read.csv(filepath, header = TRUE)            # Read the file
completeCases = data[complete.cases(data), ]        # Subset with no NAs
ids =  c(ids, i)                                    # Add i to vector of IDs
nobss = c(nobss, nrow(completeCases))               # Add num of completed rows from the subset to vector
}
data.frame(id=ids, nobs=nobss) # Made and return data frame of IDs against NOBS
}
complete("~Downloads/specdata", 1)
complete("~/Downloads/specdata", 1)
complete("~/Downloads/specdata", c(2, 4, 8, 10, 12))
setwd("~/Documents/git/datasciencecoursera/datasciencecoursera")
source("complete.R")
corr <- function(directory, threshold = 0){
completes = complete(directory, 1:332) # Run completes on all
completes_above_threshold = subset(completes, nobs > threshold ) # Find those above threshold
correlations <- vector() # Empty vector
filenames = list.files(directory) # List of filenames
for(i in completes_above_threshold$id){
filepath=paste(directory,"/" ,filenames[i], sep="")
data = read.csv(filepath, header = TRUE)
completeCases = data[complete.cases(data),]
count = nrow(completeCases) ## Calculate and store the number of completed cases
if( count >= threshold ) { ## Calculate and store the count of complete cases if threshold
correlations = c(correlations, cor(completeCases$nitrate, completeCases$sulfate) )
}
}
correlations # Return result
}
cr <- corr("~/Downloads/specdata", 150)
head(cr)
summary(cr)
pollutantmean("~/Downloads/specdata", "sulfate", 1:10)
pollutantmean("~/Downloads/specdata", "nitrate", 70:72)
pollutantmean("~/Downloads/specdata", "sulfate", 34)
pollutantmean("~/Downloads/specdata", "nitrate")
cc <- complete("~/Downloads/specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc
cc <- complete("~/Downloads/specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("~/Downloads/specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("~/Downloads/specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("~/Downloads/specdata", 2000)
n <- length(cr)
cr <- corr("~/Downloads/specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("~/Downloads/specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
swirl()
head(flags)
dim(flags)
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat = sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,
| summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?runif
swirl()
ls()
0
exit
quit()
