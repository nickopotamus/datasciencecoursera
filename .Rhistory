spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
install.packages(c("PKPDmodels", "PKPDmisc", "PK"))
?PKPDmisc
??PKPDmisc
install.packages("nlmixr")
install.packages("shinymixr")
library(devtools)
devtools::install_github("richardhooijmaijers/shinyMixR")
devtools::install_github("richardhooijmaijers/R3port")
devtools::install_github("nlmixrdevelopment/nlmixr")
devtools::install_github("nlmixrdevelopment/xpose.nlmixr")
install.packages("pkpd")
swirl()
dice_sqr
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
sum(edh*dice_hair) - 3.5^2
sum(edh*dice_high) - 3.5^2
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(12-)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(apply(matrix(rpois(10000,4),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(3,5)
choose(5,3)*(.8)^3*(.2)^(5-3)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,.8,FALSE)
qnorm(.1)
0
qnorm(.975,3,2)
3+2*.975
3+2*1.96
pnorm(1200,1020,50)
pnorm(1200,1020,50,lower.tail = FALSE)
(1200-1020)/50
pnorm((1200-1020)/50,lower.tail = FALSE)
qnorm(.75,1020,50)
1
pnorm(qnorm(.53))
.53
ppois(3,(2.5*4)
)
ppois(3,(2.5*4))
ppois(3,2.5*4)
pbinom(5,100,.01)
pbinom(5,1000,.01)
ppois(5,.01*1000)
ppois(5,000*.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(.95)
.6+c(-1,1)*qnorm(.957)*sqrt(.6*(1-.6)/100)
.6+c(-1,1)*qnorm(.957)*sqrt(.6*.4/100)
.6 +c(-1,1)*qnorm(.957)*sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.inf
x$conf.int
confint()
confint(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
?qt
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(9)*sd/sqrt(9)
mn + c(-1,1)*qt(0.95,9)*sd/sqrt(9)
mn+c(-1,1)
mn + c(-1,1)*qt(0.975,9)*s/sqrt(9)
mn + c(-1,1)*qt(0.975,9)*s/sqrt(10)
t.test(g1,g2)
t.test(g1,g2)$conf.int
t.test(difference)$conf.int
sp <- (8-1)*15.34^2 + (21-1)*18.23^2
ns = 8+21-2
sp <- sqrt(sp/ns)
2+3
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp = 18
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp*2
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
2+2
num <- (15.34^2/8 + 18.23^2/21)^2
23
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
qt(.975,mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(100)
(32-20)/(10/sqrt(100))
(32-30)/(10/sqrt(100))
(32-30)/(10/sqrt(16))
15
qt(.95,15)
dim(fs)
t.test(fs$sheight,fs$fheight,paired=TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5,15,lower.tail = FALSE)
qnrom(.95)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail = FALSE)
pbinom(7,size=8,prob=.5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=32, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues<0.05)
sum(pValues<p.adjust(method="bonferroni"))
sum(pValues<p.adjust(pValues,method="bonferroni"))
sum(p.adjust(pValues,method="bonferroni")<0.05)
sum(p.adjust(pValues,method="BH")<0.05)
tail(trueStatus)
table(pValues2<.05,trueStatus)
24/(500+24)
24/500
table(p.adjust(pValues2,method="bonferroni"<.05,trueStatus)
)
table(p.adjust(pValues2,method="bonferroni"<.05),trueStatus)
table(p.adjust(pValues2,method="bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="BH")<.05,trueStatus)
2
sum(1:6)/5
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, rows=B, cols=nh)
?matrix
resam <- matrix(sam, nrow=B, ncol=nh)
?apply
apply(resam, 1, median)
meds <- apply(resam, 1, median)
median(fh)- median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025,0.975))
quantile(meds, c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
Bcounts
BCcounts
group
testStat()
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
library(ggplot2)
set.seed(69) # For reproducibility
lambda <- 0.2       # set lambda to 0.2
n <- 40             # 40 samples
simulations <- 1000 # 1000 simulations
simulated_exponentials <- replicate(simulations, rexp(n, lambda))
means_exponentials <- apply(simulated_exponentials, 2, mean)
means_exponentials
exp_sample_means <- NULL
for(i in 1:1000) {
exp_sample_means <- c(exp_sample_means, mean(rexp(40, 0.2)))
}
mean(exp_sample_means)
mean(means_exponentials)
lambda <- 0.2  # set lambda to 0.2
n <- 40        # 40 samples
sims <- 1000   # 1000 simulations
sim_exps <- replicate(sims, rexp(n, lambda))
means_exps <- apply(sim_exps, 2, mean)
analytical_mean <- mean(means_exps)
analytical_mean
theoretical_mean <- 1/lambda
theoretical_mean
hist(means_exponentials, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theory_mean, col = "orange")
hist(means_exps, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theory_mean, col = "orange")
hist(means_exps, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theoretical_mean, col = "orange")
hist(means_exps, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theoretical_mean, col = "orange")
?par
par(new=TRUE)
hist(means_exps, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theoretical_mean, col = "orange")
par(mfrow=c(1,1))
hist(means_exps, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theoretical_mean, col = "orange")
data <- as.data.frame(means_exp)
ggplot(data, aes(x = means_exp)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
data
data <- as.data.frame(means_exp)
ggplot(data, aes(x = means_exp)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
data <- as.data.frame(means_exps)
ggplot(data, aes(x = means_exps)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="orange",xlab = "means",main="Density of means",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=5)
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=5)
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=10)
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=20)
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=20, lwt=10)
?lines
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=20, lwd=10)
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=20, lwd=5)
qqnorm(means_exponentials)
qqline(means_exponentials, col = 2)
xfit <- seq(min(means_exps), max(means_exps), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exps,breaks=n,prob=T,col="blue",xlab = "means",main="Comparison of the sample distribution\n and the theoretical distribution",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=20, lwd=5)
# compare the distribution of averages of 40 exponentials to a normal distribution
qqnorm(means_exps)
qqline(means_exps, col = 2)
with(ToothGrowth, table(dose, supp))
library(ggplot2)
library(dplyr)
?broom
install.packages("broom","wesanderson")
install.packages(c("broom", "wesanderson"))
with(ToothGrowth, table(dose, supp))
ToothGrowth %>% group_by(dose) %>%
summarize(
q25 = quantile(len, 0.25),
q75 = quantile(len, 0.75)
) %>%
as.data.frame
ToothGrowth %>% group_by(dose) %>%
summarize(
q25 = quantile(len, 0.25),
median = quantile(len, 0.5),
q75 = quantile(len, 0.75)
) %>%
as.data.frame
ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot(aes(fill = as.factor(dose))) +
facet_grid(. ~ supp) +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level and supplement type') +
theme(legend.position = "none")
plot(ToothGrowth$len)
qqplot(ToothGrowth$len)
qqplot(ToothGrowth$len,ToothGrowth$dose)
qqplot(ToothGrowth$len,ToothGrowth$supp)
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
tidy(t_diff_supp)
library(broom)
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
t_diff_supp
tidy(t_diff_supp)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1])
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
)
pairlist()
pairwise_results
?select
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(9, 1:9)
pairwise_results
?select
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(9, 1:12)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(9, 1:11)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(1:12)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(1:11)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(11,7,8,6)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(11,7,8,5)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(11,7,8,5) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(11,7,8,5) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
)
pairwise_results
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = "µ2mg - µ1mg = 0"
) %>%
select(11,4,7,8,5)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(11,4,7,8,5) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(11,4,7,8,5) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
tidy(t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE))
setwd("~/Dropbox/git/datasciencecoursera")
